import { OnInit, ElementRef, EventEmitter, OnChanges, OnDestroy } from '@angular/core';
import { CloudinaryVideo } from '@cloudinary/url-gen';
import { Plugins, VideoPoster, VideoSources } from '@cloudinary/html';
import * as i0 from "@angular/core";
/**
 * @memberOf AngularSDK
 * @type {Component}
 * @description The Cloudinary video component.
 * @prop {CloudinaryVideo} transformation Generated by @cloudinary/url-gen
 * @prop {VideoPoster} transformation Generated by @cloudinary/url-gen
 * @prop {Plugins} plugins Advanced image component plugins lazyload()
 * @prop videoAttributes Optional attributes include controls, loop, muted, poster, preload, autoplay
 * @prop videoEvents Optional video events include play, loadstart, playing, error, ended
 * @prop {VideoSources} sources Optional sources to generate
 * @example
 *  <caption>
 *  Using custom defined resources.
 * </caption>
 *   vid = new CloudinaryVideo('dog', {cloudName: 'demo'});
 *   sources = [
 {
        type: 'mp4',
        codecs: ['vp8', 'vorbis'],
        transcode: videoCodec(auto())
},
 {
        type: 'webm',
        codecs: ['avc1.4D401E', 'mp4a.40.2'],
         transcode: videoCodec(auto())
      }];
 *
 * <advanced-video [cldvid]="vid" [sources]="sources" controls></advanced-video>
 */
export declare class CloudinaryVideoComponent implements OnInit, OnChanges, OnDestroy {
    private el;
    constructor(el: ElementRef);
    cldVid: CloudinaryVideo;
    cldPoster: VideoPoster;
    sources: VideoSources;
    plugins: Plugins;
    poster: string;
    innerRef: ElementRef;
    play: EventEmitter<any>;
    loadstart: EventEmitter<any>;
    playing: EventEmitter<any>;
    error: EventEmitter<any>;
    ended: EventEmitter<any>;
    controls: any;
    loop: any;
    muted: any;
    preload: any;
    autoPlay: any;
    playsInline: any;
    private htmlVideoLayerInstance;
    /**
     * On init creates a new HTMLVideoLayer instance and initializes with ref to video element,
     * user generated cloudinaryVideo and the plugins to be used.
     */
    ngOnInit(): void;
    /**
     * On update, we cancel running plugins and update the video instance if the src
     * was changed.
     */
    ngOnChanges(): void;
    /**
     * On destroy, we cancel the currently running plugins.
     */
    ngOnDestroy(): void;
    /**
     * Returns video attributes.
     */
    getVideoAttributes(): {
        controls: any;
        loop: any;
        muted: any;
        poster: string;
        preload: any;
        autoplay: any;
        playsinline: any;
    };
    emitPlayEvent(): void;
    emitLoadstartEvent(): void;
    emitPlayingEvent(): void;
    emitErrorEvent(): void;
    emitEndedEvent(): void;
    /**
     * Attach both this.videoRef and props.innerRef as ref to the given element.
     */
    attachRef(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CloudinaryVideoComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CloudinaryVideoComponent, "advanced-video", never, { "cldVid": "cldVid"; "cldPoster": "cldPoster"; "sources": "sources"; "plugins": "plugins"; "poster": "poster"; "innerRef": "innerRef"; }, { "play": "play"; "loadstart": "loadstart"; "playing": "playing"; "error": "error"; "ended": "ended"; }, never, never>;
}
