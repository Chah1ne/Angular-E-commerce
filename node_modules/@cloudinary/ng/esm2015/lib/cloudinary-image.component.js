import { Component, Input, ElementRef } from '@angular/core';
import { CloudinaryImage } from '@cloudinary/url-gen/assets/CloudinaryImage';
import { cancelCurrentlyRunningPlugins, HtmlImageLayer } from '@cloudinary/html';
import { SDKAnalyticsConstants } from '../internal/SDKAnalyticsConstants';
import * as i0 from "@angular/core";
/**
 * @mixin AngularSDK
 * @description The Cloudinary Angular SDK contains components like \<advanced-image\> to easily render your media assets from
 * Cloudinary. The SDK also comes with support for optional JS plugins that make the components smart, with features
 * like lazy loading, placeholder, accessibility & responsiveness.
 *
 * @example
 * <caption>
 *  Please note that the order of the plugins is important. See {@link https://cloudinary.com/documentation/sdks/js/frontend-frameworks/index.html#plugin-order|Plugin Order} for more details.
 * </caption>
 * // In your app.module.ts inject the library.
 * import { CloudinaryModule} from '@cloudinary/angular';
 *
 * imports: [
 *   ...,
 *   CloudinaryModule,
 * ],
 *
 * // In your component.ts use `@cloudinary/url-gen` to generate your transformations.
 * // Import the plugins you wish to use
 *
 * import {CloudinaryImage} from "@cloudinary/url-gen/assets/CloudinaryImage";
 * import {
 *  AdvancedImage,
 *  accessibility,
 *  responsive,
 *  lazyload,
 *  placeholder
 * } from '@cloudinary/angular';
 *
 * ngOnInit() {
 *   const myCld = new Cloudinary({ cloudName: 'demo'});
 *   this.img = myCld().image('sample');
 *
 *   this.plugins = [lazyload(), placeholder()]
 * }
 *
 * // In your view add the component with your transformation.
 * <advanced-image [cldImg]="this.img" [plugins]="this.plugins"></advanced-image>
 */
/**
 * @memberOf AngularSDK
 * @type {Component}
 * @description The Cloudinary image component.
 * @prop {CloudinaryImage} transformation Generated by @cloudinary/url-gen
 * @prop {Plugins} plugins Advanced image component plugins accessibility(), responsive(), lazyload(), placeholder()
 * @prop imageAttributes Optional attributes include alt, width, height, loading
 */
export class CloudinaryImageComponent {
    constructor(el) {
        this.el = el;
    }
    /**
     * On init creates a new HTMLLayer instance and initializes with ref to img element,
     * user generated cloudinaryImage and the plugins to be used.
     */
    ngOnInit() {
        this.htmlLayerInstance = new HtmlImageLayer(this.el.nativeElement.children[0], this.cldImg, this.plugins, SDKAnalyticsConstants);
        this.addAttributes();
    }
    /**
     * On update, we cancel running plugins and update the image instance with the state of user
     * cloudinaryImage and the state of plugins.
     */
    ngOnChanges() {
        if (this.htmlLayerInstance) {
            cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);
            this.htmlLayerInstance.update(this.cldImg, this.plugins, SDKAnalyticsConstants);
        }
    }
    /**
     * On destroy, we cancel the currently running plugins.
     */
    ngOnDestroy() {
        // safely cancel running events on destroy
        cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);
    }
    /**
     * Add attributes to img element.
     */
    addAttributes() {
        ['alt', 'width', 'height', 'loading'].forEach(attr => {
            if (this[attr]) {
                this.el.nativeElement.children[0].setAttribute(attr, this[attr]);
                this.el.nativeElement.removeAttribute(attr);
            }
        });
    }
}
CloudinaryImageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CloudinaryImageComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
CloudinaryImageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CloudinaryImageComponent, selector: "advanced-image", inputs: { cldImg: "cldImg", plugins: "plugins", alt: "alt", width: "width", height: "height", loading: "loading" }, usesOnChanges: true, ngImport: i0, template: `
    <img />
  `, isInline: true, styles: [":host{display:block}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CloudinaryImageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'advanced-image',
                    template: `
    <img />
  `,
                    styleUrls: ['./cloudinary-image.component.css']
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { cldImg: [{
                type: Input,
                args: ['cldImg']
            }], plugins: [{
                type: Input,
                args: ['plugins']
            }], alt: [{
                type: Input,
                args: ['alt']
            }], width: [{
                type: Input,
                args: ['width']
            }], height: [{
                type: Input,
                args: ['height']
            }], loading: [{
                type: Input,
                args: ['loading']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRpbmFyeS1pbWFnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2Nsb3VkaW5hcnktaW1hZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQVUsS0FBSyxFQUFFLFVBQVUsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDekYsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDRDQUE0QyxDQUFDO0FBQzNFLE9BQU8sRUFDTCw2QkFBNkIsRUFDN0IsY0FBYyxFQUVmLE1BQU0sa0JBQWtCLENBQUM7QUFDMUIsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sbUNBQW1DLENBQUM7O0FBRXhFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1Q0c7QUFFSDs7Ozs7OztHQU9HO0FBUUgsTUFBTSxPQUFPLHdCQUF3QjtJQVFuQyxZQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtJQUFJLENBQUM7SUFFdkM7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLHFCQUFxQixDQUFDLENBQUM7UUFDakksSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDMUIsNkJBQTZCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ3RFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLHFCQUFxQixDQUFDLENBQUM7U0FDakY7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXO1FBQ1QsMENBQTBDO1FBQzFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxhQUFhO1FBQ1gsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbkQsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2pFLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM3QztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7c0hBaERVLHdCQUF3QjswR0FBeEIsd0JBQXdCLCtMQUx6Qjs7R0FFVDs0RkFHVSx3QkFBd0I7a0JBUHBDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsUUFBUSxFQUFFOztHQUVUO29CQUNELFNBQVMsRUFBRSxDQUFDLGtDQUFrQyxDQUFDO2lCQUNoRDtpR0FFa0IsTUFBTTtzQkFBdEIsS0FBSzt1QkFBQyxRQUFRO2dCQUNHLE9BQU87c0JBQXhCLEtBQUs7dUJBQUMsU0FBUztnQkFDRixHQUFHO3NCQUFoQixLQUFLO3VCQUFDLEtBQUs7Z0JBQ0ksS0FBSztzQkFBcEIsS0FBSzt1QkFBQyxPQUFPO2dCQUNHLE1BQU07c0JBQXRCLEtBQUs7dUJBQUMsUUFBUTtnQkFDRyxPQUFPO3NCQUF4QixLQUFLO3VCQUFDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgRWxlbWVudFJlZiwgT25EZXN0cm95LCBPbkNoYW5nZXN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDbG91ZGluYXJ5SW1hZ2V9IGZyb20gJ0BjbG91ZGluYXJ5L3VybC1nZW4vYXNzZXRzL0Nsb3VkaW5hcnlJbWFnZSc7XG5pbXBvcnQge1xuICBjYW5jZWxDdXJyZW50bHlSdW5uaW5nUGx1Z2lucyxcbiAgSHRtbEltYWdlTGF5ZXIsXG4gIFBsdWdpbnNcbn0gZnJvbSAnQGNsb3VkaW5hcnkvaHRtbCc7XG5pbXBvcnQge1NES0FuYWx5dGljc0NvbnN0YW50c30gZnJvbSAnLi4vaW50ZXJuYWwvU0RLQW5hbHl0aWNzQ29uc3RhbnRzJztcblxuLyoqXG4gKiBAbWl4aW4gQW5ndWxhclNES1xuICogQGRlc2NyaXB0aW9uIFRoZSBDbG91ZGluYXJ5IEFuZ3VsYXIgU0RLIGNvbnRhaW5zIGNvbXBvbmVudHMgbGlrZSBcXDxhZHZhbmNlZC1pbWFnZVxcPiB0byBlYXNpbHkgcmVuZGVyIHlvdXIgbWVkaWEgYXNzZXRzIGZyb21cbiAqIENsb3VkaW5hcnkuIFRoZSBTREsgYWxzbyBjb21lcyB3aXRoIHN1cHBvcnQgZm9yIG9wdGlvbmFsIEpTIHBsdWdpbnMgdGhhdCBtYWtlIHRoZSBjb21wb25lbnRzIHNtYXJ0LCB3aXRoIGZlYXR1cmVzXG4gKiBsaWtlIGxhenkgbG9hZGluZywgcGxhY2Vob2xkZXIsIGFjY2Vzc2liaWxpdHkgJiByZXNwb25zaXZlbmVzcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGNhcHRpb24+XG4gKiAgUGxlYXNlIG5vdGUgdGhhdCB0aGUgb3JkZXIgb2YgdGhlIHBsdWdpbnMgaXMgaW1wb3J0YW50LiBTZWUge0BsaW5rIGh0dHBzOi8vY2xvdWRpbmFyeS5jb20vZG9jdW1lbnRhdGlvbi9zZGtzL2pzL2Zyb250ZW5kLWZyYW1ld29ya3MvaW5kZXguaHRtbCNwbHVnaW4tb3JkZXJ8UGx1Z2luIE9yZGVyfSBmb3IgbW9yZSBkZXRhaWxzLlxuICogPC9jYXB0aW9uPlxuICogLy8gSW4geW91ciBhcHAubW9kdWxlLnRzIGluamVjdCB0aGUgbGlicmFyeS5cbiAqIGltcG9ydCB7IENsb3VkaW5hcnlNb2R1bGV9IGZyb20gJ0BjbG91ZGluYXJ5L2FuZ3VsYXInO1xuICpcbiAqIGltcG9ydHM6IFtcbiAqICAgLi4uLFxuICogICBDbG91ZGluYXJ5TW9kdWxlLFxuICogXSxcbiAqXG4gKiAvLyBJbiB5b3VyIGNvbXBvbmVudC50cyB1c2UgYEBjbG91ZGluYXJ5L3VybC1nZW5gIHRvIGdlbmVyYXRlIHlvdXIgdHJhbnNmb3JtYXRpb25zLlxuICogLy8gSW1wb3J0IHRoZSBwbHVnaW5zIHlvdSB3aXNoIHRvIHVzZVxuICpcbiAqIGltcG9ydCB7Q2xvdWRpbmFyeUltYWdlfSBmcm9tIFwiQGNsb3VkaW5hcnkvdXJsLWdlbi9hc3NldHMvQ2xvdWRpbmFyeUltYWdlXCI7XG4gKiBpbXBvcnQge1xuICogIEFkdmFuY2VkSW1hZ2UsXG4gKiAgYWNjZXNzaWJpbGl0eSxcbiAqICByZXNwb25zaXZlLFxuICogIGxhenlsb2FkLFxuICogIHBsYWNlaG9sZGVyXG4gKiB9IGZyb20gJ0BjbG91ZGluYXJ5L2FuZ3VsYXInO1xuICpcbiAqIG5nT25Jbml0KCkge1xuICogICBjb25zdCBteUNsZCA9IG5ldyBDbG91ZGluYXJ5KHsgY2xvdWROYW1lOiAnZGVtbyd9KTtcbiAqICAgdGhpcy5pbWcgPSBteUNsZCgpLmltYWdlKCdzYW1wbGUnKTtcbiAqXG4gKiAgIHRoaXMucGx1Z2lucyA9IFtsYXp5bG9hZCgpLCBwbGFjZWhvbGRlcigpXVxuICogfVxuICpcbiAqIC8vIEluIHlvdXIgdmlldyBhZGQgdGhlIGNvbXBvbmVudCB3aXRoIHlvdXIgdHJhbnNmb3JtYXRpb24uXG4gKiA8YWR2YW5jZWQtaW1hZ2UgW2NsZEltZ109XCJ0aGlzLmltZ1wiIFtwbHVnaW5zXT1cInRoaXMucGx1Z2luc1wiPjwvYWR2YW5jZWQtaW1hZ2U+XG4gKi9cblxuLyoqXG4gKiBAbWVtYmVyT2YgQW5ndWxhclNES1xuICogQHR5cGUge0NvbXBvbmVudH1cbiAqIEBkZXNjcmlwdGlvbiBUaGUgQ2xvdWRpbmFyeSBpbWFnZSBjb21wb25lbnQuXG4gKiBAcHJvcCB7Q2xvdWRpbmFyeUltYWdlfSB0cmFuc2Zvcm1hdGlvbiBHZW5lcmF0ZWQgYnkgQGNsb3VkaW5hcnkvdXJsLWdlblxuICogQHByb3Age1BsdWdpbnN9IHBsdWdpbnMgQWR2YW5jZWQgaW1hZ2UgY29tcG9uZW50IHBsdWdpbnMgYWNjZXNzaWJpbGl0eSgpLCByZXNwb25zaXZlKCksIGxhenlsb2FkKCksIHBsYWNlaG9sZGVyKClcbiAqIEBwcm9wIGltYWdlQXR0cmlidXRlcyBPcHRpb25hbCBhdHRyaWJ1dGVzIGluY2x1ZGUgYWx0LCB3aWR0aCwgaGVpZ2h0LCBsb2FkaW5nXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FkdmFuY2VkLWltYWdlJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8aW1nIC8+XG4gIGAsXG4gIHN0eWxlVXJsczogWycuL2Nsb3VkaW5hcnktaW1hZ2UuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIENsb3VkaW5hcnlJbWFnZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBASW5wdXQoJ2NsZEltZycpIGNsZEltZzogQ2xvdWRpbmFyeUltYWdlO1xuICBASW5wdXQoJ3BsdWdpbnMnKSBwbHVnaW5zOiBQbHVnaW5zO1xuICBASW5wdXQoJ2FsdCcpIGFsdDogc3RyaW5nO1xuICBASW5wdXQoJ3dpZHRoJykgd2lkdGg6IHN0cmluZztcbiAgQElucHV0KCdoZWlnaHQnKSBoZWlnaHQ6IHN0cmluZztcbiAgQElucHV0KCdsb2FkaW5nJykgbG9hZGluZzogc3RyaW5nO1xuICBodG1sTGF5ZXJJbnN0YW5jZTogSHRtbEltYWdlTGF5ZXI7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHsgfVxuXG4gIC8qKlxuICAgKiBPbiBpbml0IGNyZWF0ZXMgYSBuZXcgSFRNTExheWVyIGluc3RhbmNlIGFuZCBpbml0aWFsaXplcyB3aXRoIHJlZiB0byBpbWcgZWxlbWVudCxcbiAgICogdXNlciBnZW5lcmF0ZWQgY2xvdWRpbmFyeUltYWdlIGFuZCB0aGUgcGx1Z2lucyB0byBiZSB1c2VkLlxuICAgKi9cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5odG1sTGF5ZXJJbnN0YW5jZSA9IG5ldyBIdG1sSW1hZ2VMYXllcih0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5bMF0sIHRoaXMuY2xkSW1nLCB0aGlzLnBsdWdpbnMsIFNES0FuYWx5dGljc0NvbnN0YW50cyk7XG4gICAgdGhpcy5hZGRBdHRyaWJ1dGVzKCk7XG4gIH1cblxuICAvKipcbiAgICogT24gdXBkYXRlLCB3ZSBjYW5jZWwgcnVubmluZyBwbHVnaW5zIGFuZCB1cGRhdGUgdGhlIGltYWdlIGluc3RhbmNlIHdpdGggdGhlIHN0YXRlIG9mIHVzZXJcbiAgICogY2xvdWRpbmFyeUltYWdlIGFuZCB0aGUgc3RhdGUgb2YgcGx1Z2lucy5cbiAgICovXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIGlmICh0aGlzLmh0bWxMYXllckluc3RhbmNlKSB7XG4gICAgICBjYW5jZWxDdXJyZW50bHlSdW5uaW5nUGx1Z2lucyh0aGlzLmh0bWxMYXllckluc3RhbmNlLmh0bWxQbHVnaW5TdGF0ZSk7XG4gICAgICB0aGlzLmh0bWxMYXllckluc3RhbmNlLnVwZGF0ZSh0aGlzLmNsZEltZywgdGhpcy5wbHVnaW5zLCBTREtBbmFseXRpY3NDb25zdGFudHMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPbiBkZXN0cm95LCB3ZSBjYW5jZWwgdGhlIGN1cnJlbnRseSBydW5uaW5nIHBsdWdpbnMuXG4gICAqL1xuICBuZ09uRGVzdHJveSgpIHtcbiAgICAvLyBzYWZlbHkgY2FuY2VsIHJ1bm5pbmcgZXZlbnRzIG9uIGRlc3Ryb3lcbiAgICBjYW5jZWxDdXJyZW50bHlSdW5uaW5nUGx1Z2lucyh0aGlzLmh0bWxMYXllckluc3RhbmNlLmh0bWxQbHVnaW5TdGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGF0dHJpYnV0ZXMgdG8gaW1nIGVsZW1lbnQuXG4gICAqL1xuICBhZGRBdHRyaWJ1dGVzKCkge1xuICAgIFsnYWx0JywgJ3dpZHRoJywgJ2hlaWdodCcsICdsb2FkaW5nJ10uZm9yRWFjaChhdHRyID0+IHtcbiAgICAgIGlmICh0aGlzW2F0dHJdKSB7XG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoYXR0ciwgdGhpc1thdHRyXSk7XG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==